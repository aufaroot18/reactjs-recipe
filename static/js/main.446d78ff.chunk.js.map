{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","className","type","name","placeholder","Recipes","recipes","map","key","recipe_id","src","image_url","alt","title","length","concat","substring","publisher","react_router_dom","to","pathname","state","API_KEY","App","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","_this","setState","stop","recipesUpdate","JSON","parse","localStorage","getItem","this","console","log","stringify","setItem","components_Form","components_Recipes","Component","Recipe","activeRecipe","componentDidMount","rid","req","res","location","recipe","href","source_url","React","Router","react_router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.446d78ff.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = (props) => {\n\treturn(\n\t\t<form onSubmit={props.getRecipe} className=\"form-inline justify-content-center mb-2\">\n\t\t\t<div className=\"form-group\">\n\t\t\t\t<input className=\"form-control mx-3\" type=\"text\" name=\"recipeName\" placeholder=\"Makanan\" />\n\t\t\t</div>\n\t\t\t<button type=\"submit\" className=\"btn btn-primary\">Search</button>\n\t\t</form>\n\t);\n};\n\nexport default Form;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Recipes = (props) => (\n\t<div className=\"container\">\n\t\t<div className=\"row\">\n\t\t\t{props.recipes.map((recipes) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"col-4 mb-2\" key={recipes.recipe_id}>\n\t\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t\t<img className=\"card-img-top\" src={recipes.image_url} alt={recipes.title} />\n\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t<h5 className=\"card-title\">\n\t\t\t\t\t\t\t\t\t{recipes.title.length < 20 ? `${recipes.title}` : `${recipes.title.substring(0, 25)}...`}\n\t\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t\t<p className=\"card-text\">Publisher: {recipes.publisher}</p>\n\t\t\t\t\t\t\t\t<button className=\"btn btn-primary btn-sm\">\n\t\t\t\t\t\t\t\t\t<Link to={{ \n\t\t\t\t\t\t\t\t\t\tpathname: `/recipe/${recipes.recipe_id}`,\n\t\t\t\t\t\t\t\t\t\tstate: {recipes: recipes.recipe_id}\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-white\">View Recipe</span>\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t</div>\n);\n\nexport default Recipes;","import React, {Component} from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Recipes from './components/Recipes';\n\n// API Key dari food2fork\nconst API_KEY = \"8bf66259d30db71a84ed6ca7032e7c39\";\n\nclass App extends Component {\n\n  // membuat state\n  state = {\n    recipes: []\n  }\n\n  getRecipe = async (e) => {\n    // mengambil value dari input\n    const recipeName = e.target.elements.recipeName.value;\n\n    // melakukan prevent default\n    e.preventDefault();\n\n    // mengakses API dari food2fork\n    const api_call = await fetch(`https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&count=9`) ;\n\n    // mengubah ke format json\n    const data = await api_call.json();\n    \n    // disimpan ke dalam state\n    this.setState({recipes: data.recipes});\n  }\n\n  // componentDidMount\n  componentDidMount() {\n    const recipesUpdate = JSON.parse(localStorage.getItem(\"recipesUpdate\"));\n    this.setState({\n      recipes: recipesUpdate,\n    })\n    console.log(\"Component Did Mount\");\n  }\n\n  // componentDidUpdate\n  componentDidUpdate() {\n    const recipesUpdate = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipesUpdate\", recipesUpdate);\n    console.log(\"Component Did Update\");\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Search</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes}/>        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst API_KEY = \"8bf66259d30db71a84ed6ca7032e7c39\";\n\nclass Recipe extends React.Component {\n\n\n\tstate = {\n\t\tactiveRecipe: [],\n\t}\n\n\tcomponentDidMount = async () => {\n\t\tconst rid = this.props.location.state.recipes;\n\t\tconst req = await fetch(`https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/get?key=${API_KEY}&rId=${rid}`) ;\n\t\tconst res = await req.json();\n\t\tthis.setState({activeRecipe: res.recipe});\n\t\t// console.log(this.state.activeRecipe.title);\n\t}\n\n\trender() {\n\t\tconst recipe = this.state.activeRecipe;\n\t\treturn (\n\t\t\t<div className=\"container mt-3\">\n\t\t\t\t<div className=\"card w-50 m-auto\">\n\t\t\t\t\t<img className=\"card-img-top\" src={recipe.image_url} alt={recipe.title} />\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t<h5 className=\"card-title\">{recipe.title}</h5>\n\t\t\t\t\t\t<p className=\"card-text\">Publisher: {recipe.publisher}</p>\n\t\t\t\t\t\t<p className=\"card-text\">Website: <a href={recipe.source_url}>{recipe.title}</a></p>\n\t\t\t\t\t\t<button className=\"btn btn-primary\">\n\t\t\t\t\t\t\t<Link to={\"/\"}><span className=\"text-white\">Home</span></Link>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Recipe;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport App from '../App';\nimport Recipe from './Recipe';\n\nconst Router = () => (\n\t<BrowserRouter>\n\t\t<Switch>\n\t\t\t<Route path=\"/\" component={App} exact />\n\t\t\t<Route path=\"/recipe/:id\" component={Recipe} />\n\t\t</Switch>\n\t</BrowserRouter>\n);\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}